{"version":3,"sources":["components/RSSItem.js","components/RSSList.js","store/actions/RSSActions.js","pages/DatadogPage.js","pages/AzurePage.js","pages/ErrorPage.js","components/Navigation.js","App.js","serviceWorker.js","store/reducers/RSSReducer.js","store/index.js","index.js"],"names":["RSSItem","item","this","props","pubDate","moment","format","className","title","dangerouslySetInnerHTML","__html","content","href","link","Component","RSSList","data","map","key","Actions","fetchRSS","rssUrl","dispatch","getState","a","parser","Parser","parseURL","feed","type","payload","items","message","DatadogPage","fetchData","setState","loading","state","intervalID","setInterval","bind","clearTimeout","RefreshInterval","rssFeed","slice","customLoading","lastUpdatedAt","ErrorMessage","connect","ownProps","rss","AzurePage","CORS_PROXY","getSystemStatus","length","ErrorPage","Navigation","to","App","path","component","exact","Boolean","window","location","hostname","match","initialState","rssReducer","action","error","reducer","combineReducers","RSSReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fb76090.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\n\n//Component that shows individual posts\nclass RSSItem extends Component {\n  render() {\n    const { item } = this.props;\n    // formating pubDate from RSS feed\n    const pubDate = moment(item.pubDate).format(\"MMMM Do YYYY, h:mm:ss a\");\n\n    return (\n      <div className=\"RSSItem\">\n        <p>Published: {pubDate}</p>\n        <h1>{item.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: item.content }} />\n        <a href={item.link}>Read More</a>\n      </div>\n    );\n  }\n}\n\nexport default RSSItem;\n","import React, { Component } from \"react\";\nimport RSSItem from \"./RSSItem\";\n\n//Component that renders Items for each individual post\nclass RSSList extends Component {\n  render() {\n    const { data } = this.props;\n    return (\n      <>\n        {data ? (\n          data.map((item, key) => {\n            return <RSSItem key={key} item={item} />;\n          })\n        ) : (\n          <div className=\"RSSItem\">\n            <p>No data availabe</p>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default RSSList;\n","import Parser from \"rss-parser\";\n\nexport const Actions = {\n  GET_RSS_FEED_SUCCESS: \"GET_RSS_FEED_SUCCESS\",\n  GET_RSS_FEED_FAILURE: \"GET_RSS_FEED_FAILURE\"\n};\n\nexport const fetchRSS = rssUrl => {\n  return async (dispatch, getState) => {\n    const parser = new Parser();\n    try {\n      const feed = await parser.parseURL(rssUrl);\n      return dispatch({\n        type: Actions.GET_RSS_FEED_SUCCESS,\n        payload: feed.items\n      });\n    } catch (e) {\n      return dispatch({\n        type: Actions.GET_RSS_FEED_FAILURE,\n        payload: e.message\n      });\n    }\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport RSSList from \"../components/RSSList\";\nimport { fetchRSS } from \"../store/actions/RSSActions\";\nimport { Dots } from \"react-preloaders\";\n\nclass DatadogPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n  }\n  // A variable that can be referenced to start and stop setInterval() method\n  RefreshInterval;\n  componentDidMount() {\n    this.fetchData();\n    // Refresh the Feed each 10 minutes\n    this.intervalID = setInterval(this.fetchData.bind(this), 600000);\n  }\n\n  componentWillUnmount() {\n    // Stop the setInterval() method when component unmonts\n    clearTimeout(this.RefreshInterval);\n  }\n  // Fetching data from RSS link\n  fetchData = () => {\n    // Url of the RSS feed\n    const rssUrl = \"https://status.datadoghq.com/history.rss\";\n    this.props.fetchRSS(rssUrl);\n    this.setState({ loading: false });\n  };\n\n  render() {\n    // Shows only 5 last posts\n    const data = this.props.rssFeed.slice(0, 5);\n    return (\n      <div className=\"PageContainer\">\n        <Dots customLoading={this.state.loading} />\n        <h1>Datadog 5 Past Incidents</h1>\n        <p>\n          Automatic refresh once 10 minutes. Last Updated:{\" \"}\n          {this.props.lastUpdatedAt}\n        </p>\n        <RSSList data={data} />\n        <p>{this.props.ErrorMessage}</p>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  //this is the mapStateToProps and mapDispatchToProps functions in simplified way\n  (state, ownProps) => ({\n    rssFeed: state.rss.rssFeed,\n    ErrorMessage: state.rss.ErrorMessage,\n    lastUpdatedAt: state.rss.lastUpdatedAt\n  }),\n  { fetchRSS }\n)(DatadogPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport RSSList from \"../components/RSSList\";\nimport { fetchRSS } from \"../store/actions/RSSActions\";\nimport { Dots } from \"react-preloaders\";\n\nclass AzurePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n  }\n  // A variable that can be referenced to start and stop setInterval() method\n  RefreshInterval;\n  componentDidMount() {\n    this.fetchData();\n    // Refresh the Feed each 10 minutes\n    this.intervalID = setInterval(this.fetchData.bind(this), 600000);\n  }\n\n  componentWillUnmount() {\n    // Stop the setInterval() method when component unmonts\n    clearTimeout(this.RefreshInterval);\n  }\n\n  // Fetching data from RSS link\n  fetchData = () => {\n    // Temporary solution to avoid cors security issue\n    const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n    // Url of the RSS feed\n    const rssUrl = \"https://azurestatuscdn.azureedge.net/en-us/status/feed/\";\n    this.props.fetchRSS(CORS_PROXY + rssUrl);\n    this.setState({ loading: false });\n  };\n\n  getSystemStatus = () => {\n    if (this.props.rssFeed.length === 0 && !this.props.ErrorMessage) {\n      // If the feed is empty, no malfunctions are found on the server\n      return \"Stable\";\n    }\n    return \"Unknown\";\n  };\n\n  render() {\n    const data = this.props.rssFeed;\n    return (\n      <div className=\"PageContainer\">\n        <Dots customLoading={this.state.loading} />\n        <h1>Azure Server Status</h1>\n        System status: {this.getSystemStatus()}\n        <p>\n          Automatic refresh once 10 minutes. Last Updated:{\" \"}\n          {this.props.lastUpdatedAt}\n        </p>\n        <RSSList data={data} />\n        <p>{this.props.ErrorMessage}</p>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  //this is the mapStateToProps and mapDispatchToProps functions in simplified way\n  (state, ownProps) => ({\n    rssFeed: state.rss.rssFeed,\n    ErrorMessage: state.rss.ErrorMessage,\n    lastUpdatedAt: state.rss.lastUpdatedAt\n  }),\n  { fetchRSS }\n)(AzurePage);\n","import React, { Component } from \"react\";\n\nclass ErrorPage extends Component {\n  render() {\n    return (\n      <>\n        <h1>Error 404 Page does not exist</h1>\n      </>\n    );\n  }\n}\n\nexport default ErrorPage;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\n// Navigation Bar component\nclass Navigation extends Component {\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <NavLink to=\"/\">Datalog Feed</NavLink>\n        <NavLink to=\"/azure\">Azure Status</NavLink>\n      </div>\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DatadogPage from \"./pages/DatadogPage\";\nimport AzurePage from \"./pages/AzurePage\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport Navigation from \"./components/Navigation\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <>\n          <Navigation />\n          <Switch>\n            <Route path=\"/\" component={DatadogPage} />\n            <Route path=\"/azure\" component={AzurePage} exact />\n            <Route component={ErrorPage} />\n          </Switch>\n        </>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Actions } from \"../actions/RSSActions\";\nimport moment from \"moment\";\n\nconst initialState = {\n  rssFeed: [],\n  ErrorMessage: false\n};\n\nconst rssReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.GET_RSS_FEED_SUCCESS:\n      return {\n        ...state,\n        rssFeed: action.payload,\n        ErrorMessage: action.error,\n        lastUpdatedAt: moment().format(\"MMMM Do YYYY, h:mm:ss a\")\n      };\n    case Actions.GET_RSS_FEED_FAILURE:\n      return {\n        ...state,\n        rssFeed: [],\n        ErrorMessage: action.payload,\n        lastUpdatedAt: moment().format(\"MMMM Do YYYY, h:mm:ss a\")\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rssReducer;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport RSSReducer from \"./reducers/RSSReducer\";\nimport thunk from \"redux-thunk\";\n\nconst reducer = combineReducers({\n  rss: RSSReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}